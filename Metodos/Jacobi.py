# -*- coding: utf-8 -*-
"""Copia de Te damos la bienvenida a Colaboratory

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/12GPpwT7RT7ZpKe_8lxdBYweg02MLtn5p
"""

import numpy as np
def jacobi(A,b,tol,numIter):
  n = np.size(A,0)
  L = - np.tril(A, -1)
  U = - np.triu(A,1)
  D = A+L+U
  x0 = np.zeros([n,1])
  Tj = np.matmul(inv(D),(L+U))
  autoval, autovec= np.linalg.eig(Tj)
  autoval= abs(autoval)

  for lam in autovalores:
    if lam >= 1:
      return ("El mÃ©todo no logra converger con los parametros ingresados")

  C = np.matmul(inv(D),b)
  xn = (np.matmul(Tj,x0))+C
  error = np.array(abs(xn - (np.dot(Tj,xn)+C)))
  error = np.amax(error)
  iter = 0
  while ((error > tol) and (iter<numIter)):
    nuevo = np.matmul(Tj,xn)+C
    error = np.array(abs(nuevo-xn))
    error = np.amax(error)
    xn = nuevo
    iter = iter +1
  return("El mÃ©todo converge en "+str(xn))

#jacobi(A,b,tol, numIter)