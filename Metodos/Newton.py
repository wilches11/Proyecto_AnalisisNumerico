# -*- coding: utf-8 -*-
"""Newton.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1et-Qn1ExdMsZmtWH4XkpGOZeqWqiW-5h
"""

import numpy as np
from numpy.linalg import inv
import sympy as sym
import math

x = sym.Symbol('x')
def Newton (f, df, x0, numIter, tol):
  cont = 0
  error = tol + 1
  while (cont < numIter and error > tol):
    xn = x0 - float(f.subs(x, x0))/float(df.subs(x, x0))
    error = abs(xn - x0)
    cont += 1
    x0 = xn
  if error <= tol:
    return(str(xn) + " es raíz con tolerancia " + str(tol)+ " y se ejecutaron " + str(cont)) + " iteraciones " 
  else:
    return("El método no converge")

#f = x - (2*x/(x**2 + 9)**(1/2))- 0.8
#df = sym.diff(f, x)
#Newton(f, df, 1, 10000, 0.00005)